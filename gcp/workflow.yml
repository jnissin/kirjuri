main:
  params: [args]
  steps:
    - init:
        assign:
          - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
    - get_container_name_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
          project_id: ${project}
          secret_id: "kirjuri-transcription-engine-container-name"
          version: "latest"
        result: container_name
    - get_startup_script_gs_uri_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
          project_id: ${project}
          secret_id: "kirjuri-transcription-engine-startup-script-gs-uri"
          version: "latest"
        result: startup_script_gs_uri
    - create_compute_gpu_vm:
        call: createComputeGPUVM
        args:
          project: ${project}
          region: ${args.region}
          zone: ${args.zone}
          instance_name: ${args.instance_name}
          machine_type: "n1-standard-8"
          accelerator_type: "nvidia-tesla-t4"
          container_name: ${container_name}
          startup_script_gs_uri: ${startup_script_gs_uri}
        result: tpu_result
    - sleep: 
        call: sys.sleep
        args:
          seconds: 1800  # Delay for 30 min(s)
    - delete_compute_gpu_vm:
        call: deleteComputeGPUVM
        args:
          project: ${project}
          zone: ${args.zone}
          instance_name: ${args.instance_name}
        result: delete_result
    - return_result:
        return: ${delete_result}

createComputeGPUVM:
  params: [project, region, zone, instance_name, machine_type, accelerator_type, container_name, startup_script_gs_uri]
  steps:
    - create_instance:
        call: googleapis.compute.v1.instances.insert
        args:
          project: ${project}
          zone: ${zone}
          body:
            name: ${instance_name}
            machineType: ${"zones/" + zone + "/machineTypes/" + machine_type}
            canIpForward: false
            deletionProtection: false
            networkInterfaces:
              - accessConfigs:
                  - name: "External NAT"
                    networkTier: "PREMIUM"
                stackType: "IPV4_ONLY"
                subnetwork": ${"projects/" + project + "/regions/" + region + "/subnetworks/default"}
            disks:
              - initializeParams:
                  diskSizeGb: "100"
                  diskType: ${"projects/" + project + "/zones/" + zone + "/diskTypes/pd-balanced"}
                  sourceImage: "projects/ml-images/global/images/c0-deeplearning-common-gpu-v20230807-debian-11-py310"
                boot: true
                autoDelete: true
            guestAccelerators:
              - acceleratorType: ${"projects/" + project + "/zones/" + zone + "/acceleratorTypes/" + accelerator_type}
                acceleratorCount: 1
            reservationAffinity:
              consumeReservationType: "ANY_RESERVATION"
            scheduling:
              automaticRestart: false
              maxRunDuration:
                seconds": "14400"
              provisioningModel: "STANDARD"
              preemptible: false
              onHostMaintenance: "TERMINATE"
            shieldedInstanceConfig:
              enableIntegrityMonitoring: true
              enableSecureBoot: false
              enableVtpm: true
            metadata:
              items:
                - key: "startup-script"
                  value: |-
                    #!/bin/bash
                    echo "Copying startup payload script from GCS .."
                    gsutil cp gs://kirjuri-scripts/transcription-engine/startup.sh execute_transcription_engine.sh
                    chmod +x execute_transcription_engine.sh
                    echo "Executing startup payload script .."
                    nohup ./execute_transcription_engine.sh > execute_transcription_engine.log 2>&1 &
                    echo "Startup script done"
                - key: "payload-container-name"
                  value: ${container_name}
            serviceAccounts:
              - email: "905014932322-compute@developer.gserviceaccount.com"
                scopes:
                  - "https://www.googleapis.com/auth/devstorage.read_only"
                  - "https://www.googleapis.com/auth/logging.write"
                  - "https://www.googleapis.com/auth/monitoring.write"
                  - "https://www.googleapis.com/auth/servicecontrol"
                  - "https://www.googleapis.com/auth/service.management.readonly"
                  - "https://www.googleapis.com/auth/trace.append"
                  - "https://www.googleapis.com/auth/compute"
        result: api_response
    - return_response:
        return: ${api_response}

deleteComputeGPUVM:
  params: [project, zone, instance_name]
  steps:
    - delete_instance:
        call: googleapis.compute.v1.instances.delete
        args:
          project: ${project}
          zone: ${zone}
          instance: ${instance_name}
        result: api_response
    - return_response:
        return: ${api_response}

waitForInstanceMetadata:
  params: [project, zone, instance_name, metadata_key, metadata_value, start_time, max_duration_sec, polling_interval_sec]
  steps:
    - get_instance_data:
        call: googleapis.compute.v1.instances.get
        args:
          project: ${project}
          zone: ${zone}
          instance: ${instance_name}
        result: instance

    - find_instance_metadata:
        call: instanceHasMetadata
        args:
          metadata: instance.metadata
          key: metadata_key
          value: metadata_value
        result: metadata_value_found

    - choose_action:
        switch:
          - condition: ${metadata_value_found}
            return: true
          - condition: ${sys.now() - start_time < max_duration_sec}
            steps:
              - sleep:
                  call: sys.sleep
                  args:
                    seconds: ${polling_interval_sec}
              - recurse:
                  call: waitForInstanceMetadata
                  args:
                    project: ${project}
                    zone: ${zone}
                    instance_name: ${instance_name}
                    metadata_key: ${metadata_key}
                    metadata_value: ${metadata_value}
                    start_time: ${start_time}
                    max_duration_sec: ${max_duration_sec}
                    polling_interval_sec: ${polling_interval_sec}
          - condition: true
            return: false


instanceHasMetadata:
  params: [metadata, key, value]
  steps:
    - loop_step:
        for:
          value: item
          in: ${metadata.items}
          steps:
            - compare_step:
                switch:
                  - condition: ${item.key == key and item.value == value}
                    return: true
    - end_of_loop_step:
        return: false


bucketHasData:
  params: [bucket]
  steps:
    - list_objects:
        call: http.get
        args:
          url: ${"https://storage.googleapis.com/storage/v1/b/" + bucket + "/o"}
          auth:
            type: OAuth2
        result: bucket_data
    - check_objects:
        switch:
          - condition: ${len(bucket_data.items) > 0}
            return: true
          - condition: ${len(bucket_data.items) == 0}
            return: false

error:
  params: [error]
  steps:
    - return_error:
        return: ${error}
