main:
  params: [args]
  steps:
    - init:
        assign:
          - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - container_name: "europe-west4-docker.pkg.dev/kirjuri/kirjuri-transcription-engine/kirjuri-transcription-engine:latest"
          - startup_script_gs_uri: "gs://kirjuri-scripts/transcription-engine/startup.sh"
    - check_for_ingestion_data:
        call: bucketHasData
        args:
          bucket: "kirjuri-ingestion-db"
        result: ingestion_has_data
    - check_if_instance_exists:
        try:
          call: googleapis.compute.v1.instances.get
          args:
            project: ${project}
            zone: ${args.zone}
            instance: ${args.instance_name}
          result: existing_instance
        except:
          as: ex
          assign:
            - existing_instance: null
    - choose_action:
        switch:
          - condition: ${ingestion_has_data and existing_instance == null}
            steps:
              - execute_transcription_steps:
                  call: executeTranscriptionSteps
                  args:
                    project: ${project}
                    region: ${args.region}
                    zone: ${args.zone}
                    instance_name: ${args.instance_name}
                    machine_type: "n1-standard-8"
                    accelerator_type: "nvidia-tesla-t4"
                    container_name: ${container_name}
                    startup_script_gs_uri: ${startup_script_gs_uri}
                  result: transcription_result


executeTranscriptionSteps:
  params: [project, region, zone, instance_name, machine_type, accelerator_type, container_name, startup_script_gs_uri]
  steps:
    - execute:
        try:
          steps:
            - create_compute_gpu_vm:
                call: createComputeGPUVM
                args:
                  project: ${project}
                  region: ${region}
                  zone: ${zone}
                  instance_name: ${instance_name}
                  machine_type: "n1-standard-8"
                  accelerator_type: "nvidia-tesla-t4"
                  container_name: ${container_name}
                  startup_script_gs_uri: ${startup_script_gs_uri}
                result: transcription_result
            - wait_for_instance_creation: 
                call: sys.sleep
                args:
                  seconds: 30
            - wait_for_application_state:
                call: waitForInstanceMetadata
                args:
                  project: ${project}
                  zone: ${zone}
                  instance_name: ${instance_name}
                  metadata_key: "application-status"
                  metadata_value: "DONE"
                  max_duration_sec: 14400
                  polling_interval_sec: 60
            - delete_compute_gpu_vm:
                call: deleteComputeGPUVM
                args:
                  project: ${project}
                  zone: ${zone}
                  instance_name: ${instance_name}
                result: delete_result
            - return_result_success:
                return: ${delete_result}
        except:
          as: ex
          steps:
            - on_error_cleanup:
                call: deleteComputeGPUVM
                args:
                  project: ${project}
                  zone: ${zone}
                  instance_name: ${instance_name}
                result: delete_result
            - raise_error:
                raise: ${ex}


createComputeGPUVM:
  params: [project, region, zone, instance_name, machine_type, accelerator_type, container_name, startup_script_gs_uri]
  steps:
    - create_instance:
        call: googleapis.compute.v1.instances.insert
        args:
          project: ${project}
          zone: ${zone}
          body:
            name: ${instance_name}
            machineType: ${"zones/" + zone + "/machineTypes/" + machine_type}
            canIpForward: false
            deletionProtection: false
            networkInterfaces:
              - accessConfigs:
                  - name: "External NAT"
                    networkTier: "PREMIUM"
                stackType: "IPV4_ONLY"
                subnetwork": ${"projects/" + project + "/regions/" + region + "/subnetworks/default"}
            disks:
              - initializeParams:
                  diskSizeGb: "100"
                  diskType: ${"projects/" + project + "/zones/" + zone + "/diskTypes/pd-balanced"}
                  sourceImage: "projects/ml-images/global/images/c0-deeplearning-common-gpu-v20230807-debian-11-py310"
                boot: true
                autoDelete: true
            guestAccelerators:
              - acceleratorType: ${"projects/" + project + "/zones/" + zone + "/acceleratorTypes/" + accelerator_type}
                acceleratorCount: 1
            reservationAffinity:
              consumeReservationType: "ANY_RESERVATION"
            scheduling:
              automaticRestart: false
              maxRunDuration:
                seconds": "14400"
              provisioningModel: "STANDARD"
              preemptible: false
              onHostMaintenance: "TERMINATE"
            shieldedInstanceConfig:
              enableIntegrityMonitoring: true
              enableSecureBoot: false
              enableVtpm: true
            metadata:
              items:
                - key: "startup-script"
                  value: |-
                    #!/bin/bash
                    echo "Copying startup payload script from GCS .."
                    gsutil cp gs://kirjuri-scripts/transcription-engine/startup.sh execute_transcription_engine.sh
                    chmod +x execute_transcription_engine.sh
                    echo "Executing startup payload script .."
                    nohup ./execute_transcription_engine.sh > execute_transcription_engine.log 2>&1 &
                    echo "Startup script done"
                - key: "payload-container-name"
                  value: ${container_name}
            serviceAccounts:
              - email: "905014932322-compute@developer.gserviceaccount.com"
                scopes:
                  - "https://www.googleapis.com/auth/devstorage.read_write"
                  - "https://www.googleapis.com/auth/logging.write"
                  - "https://www.googleapis.com/auth/monitoring.write"
                  - "https://www.googleapis.com/auth/servicecontrol"
                  - "https://www.googleapis.com/auth/service.management.readonly"
                  - "https://www.googleapis.com/auth/trace.append"
                  - "https://www.googleapis.com/auth/compute"
                  - "https://www.googleapis.com/auth/cloud-platform"
        result: api_response
    - return_response:
        return: ${api_response}

deleteComputeGPUVM:
  params: [project, zone, instance_name]
  steps:
    - delete_instance:
        call: googleapis.compute.v1.instances.delete
        args:
          project: ${project}
          zone: ${zone}
          instance: ${instance_name}
        result: api_response
    - return_response:
        return: ${api_response}


bucketHasData:
  params: [bucket]
  steps:
    - list_objects:
        call: googleapis.storage.v1.objects.list
        args:
          bucket: ${bucket}
        result: objects_result
    - check_objects:
        try:
          switch:
            - condition: ${objects_result == null or len(objects_result.items) == 0}
              return: false
            - condition: ${len(objects_result.items) > 0}
              return: true
            - condition: true
              return: false
        except:
          as: ex
          return: false


waitForInstanceMetadata:
  params: [project, zone, instance_name, metadata_key, metadata_value, max_duration_sec, polling_interval_sec]
  steps:
    - initialize_variables:
        assign:
          - start_time: ${sys.now()}
    - loop_until_timeout_or_found:
        for:
          value: i
          range: ${[0, max_duration_sec // polling_interval_sec]}
          steps:
            - get_instance_data:
                call: googleapis.compute.v1.instances.get
                args:
                  project: ${project}
                  zone: ${zone}
                  instance: ${instance_name}
                result: instance
            - find_instance_metadata:
                call: instanceMetadataHasKeyValue
                args:
                  metadata: ${instance.metadata}
                  key: ${metadata_key}
                  value: ${metadata_value}
                result: metadata_value_found
            - check_metadata_found:
                switch:
                  - condition: ${metadata_value_found}
                    return: true
                  - condition: true
                    assign:
                      - i: ${i + 1}
            - check_timeout_condition:
                switch:
                  - condition: ${sys.now() - start_time >= max_duration_sec}
                    return: false
            - sleep_step:
                call: sys.sleep
                args:
                  seconds: ${polling_interval_sec}
    - end_of_loop:
        return: false


instanceMetadataHasKeyValue:
  params: [metadata, key, value]
  steps:
    - loop_step:
        for:
          value: item
          in: ${metadata.items}
          steps:
            - compare_step:
                switch:
                  - condition: ${item.key == key and item.value == value}
                    return: true
    - end_of_loop_step:
        return: false


error:
  params: [error]
  steps:
    - return_error:
        return: ${error}
